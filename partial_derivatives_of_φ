import sympy as sym
# Linearisation!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F-F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3-x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4-x40)

# Define all variables
# Constants
M , m , ell , g = sym . symbols ('M, m, ell , g')

# system variables
x1 , x2 , x3 , x4 , F = sym . symbols ('x1 , x2 , x3 , x4 , F')

# Define φ
phi = 4 * m *ell *x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /=  4 * (M + m) - 3 * m * sym.cos(x3)**2

# Determine the partial derivatives of φ wrt F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)

F0 = 0
x30 = 0
x40 = 0

phi_deriv_F_at_equilibrium = phi_deriv_F.subs([(F, F0 ), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equilibrium = phi_deriv_x3.subs([(F, F0 ), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equilibrium = phi_deriv_x4.subs([(F, F0 ), (x3, x30), (x4, x40)])

sym.pprint(phi_deriv_F_at_equilibrium)
sym.pprint(phi_deriv_x3_at_equilibrium)
sym.pprint(phi_deriv_x4_at_equilibrium)



